#include <stdio.h>  
int main()  
{
    int n = 5;
    int m = 3, i, j, k, f[n], alloc[n][3], avail[3], max[n][3], ans[n], ind = 0, need[n][m], y = 0, flag;
    printf("Enter the No of processes:\n");
    scanf("%d", &n);
   
    for(i = 0; i<n; i++)
    {
        printf("Enter the allocated resources of the Process P%d:\n", i);
        scanf("%d %d %d", &alloc[i][0], &alloc[i][1], &alloc[i][2]);
    }    
    for(i = 0; i<n; i++)
    {
        printf("Enter the Max resources of the Process P%d:\n", i);
        scanf("%d %d %d", &max[i][0], &max[i][1], &max[i][2]);
    }    
    printf("Please Enter the available Resources:\n");
    scanf("%d %d %d", &avail[0], &avail[1], &avail[2]);
   
    printf("Do you have any extra requirement from the processes?(0(n)/1(y))\n");
    int ch;
    int opt;
    scanf("%d",&opt);
    if(opt==1){
        printf("Enter Process no (0-%d):",i);
        scanf("%d",&ch);
        for(i = 0; i<n; i++){
            if(i == ch)
            {    
                for(j = 0; j<m; j++)
                {
                    printf("Enter %d Value of P%d", j+1, i);
                    scanf("%d", &ch);
                    alloc[i][j] += ch;
                    avail[j]-=ch;
                }
            }
        }
    }   
    for (k = 0; k < n; k++)  
        f[k] = 0;  
   
    for (i = 0; i < n; i++)  
    {  
        for (j = 0; j < m; j++)  
            need[i][j] = max[i][j] - alloc[i][j];  
    }  
   
    for (k = 0; k < 5; k++)  
    {  
        for (i = 0; i < n; i++)  
        {  
            if (f[i] == 0)  
            {  
                flag = 0;  
                for (j = 0; j < m; j++)  
                {  
                    if (need[i][j] > avail[j])  
                    {  
                        flag = 1;  
                        break;  
                    }  
                }  
                if (flag == 0)  
                {  
                    ans[ind++] = i;  
                    for (y = 0; y < m; y++)  
                        avail[y] += alloc[i][y];  
                    f[i] = 1;  
                }  
            }  
        }  
    }  
    flag = 1;  
    for (int i = 0; i < n; i++)  
    {  
        if(ch == -1)
            break;
        else if (f[i] == 0)  
        {  
            flag = 0;  
            printf("The following system is Unsafe");  
            break;  
        }  
    }  
    if (flag == 1)  
    {  
        printf("Following is the Safe Sequence\n");  
        for (i = 0; i < n - 1; i++)  
            printf(" P%d ->", ans[i]);  
        printf(" P%d", ans[n - 1]);  
    }
    return 0;  
} 

/* Allocation Matrix
0, 1, 0 P0   
2, 0, 0 P1  
3, 0, 2 P2  
2, 1, 1 P3  
0, 0, 2 P4  

MAX Matrix
7, 5, 3 P0   
3, 2, 2 P1  
9, 0, 2 P2  
2, 2, 2 P3  
4, 3, 3 P4  
 
Available Resources 
3, 3, 2 */

